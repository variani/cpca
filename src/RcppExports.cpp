// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// eigenPower_RcppArmadillo
List eigenPower_RcppArmadillo(const arma::mat A, arma::vec v0, const double tol, const int maxit, const int verbose);
RcppExport SEXP cpca_eigenPower_RcppArmadillo(SEXP ASEXP, SEXP v0SEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const int >::type verbose(verboseSEXP);
    __result = Rcpp::wrap(eigenPower_RcppArmadillo(A, v0, tol, maxit, verbose));
    return __result;
END_RCPP
}
// eigenPower_Rcpp
List eigenPower_Rcpp(const NumericMatrix& A, const NumericVector& v0, double tol, int maxit, int mode, int verbose);
RcppExport SEXP cpca_eigenPower_Rcpp(SEXP ASEXP, SEXP v0SEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP modeSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< int >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    __result = Rcpp::wrap(eigenPower_Rcpp(A, v0, tol, maxit, mode, verbose));
    return __result;
END_RCPP
}
// innerProductParallel
double innerProductParallel(NumericVector x, NumericVector y, unsigned int chunkSize);
RcppExport SEXP cpca_innerProductParallel(SEXP xSEXP, SEXP ySEXP, SEXP chunkSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< unsigned int >::type chunkSize(chunkSizeSEXP);
    __result = Rcpp::wrap(innerProductParallel(x, y, chunkSize));
    return __result;
END_RCPP
}
// innerNormParallel
double innerNormParallel(NumericVector x, unsigned int chunkSize);
RcppExport SEXP cpca_innerNormParallel(SEXP xSEXP, SEXP chunkSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type chunkSize(chunkSizeSEXP);
    __result = Rcpp::wrap(innerNormParallel(x, chunkSize));
    return __result;
END_RCPP
}
// ProdMatVecParallel
NumericVector ProdMatVecParallel(NumericMatrix mat, NumericVector vec, unsigned int chunkSize);
RcppExport SEXP cpca_ProdMatVecParallel(SEXP matSEXP, SEXP vecSEXP, SEXP chunkSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type chunkSize(chunkSizeSEXP);
    __result = Rcpp::wrap(ProdMatVecParallel(mat, vec, chunkSize));
    return __result;
END_RCPP
}
// eigenPower_Rcpp_Parallel
List eigenPower_Rcpp_Parallel(const NumericMatrix A, const NumericVector v0, const double tol, const int maxit, unsigned int chunkSize, const int verbose);
RcppExport SEXP cpca_eigenPower_Rcpp_Parallel(SEXP ASEXP, SEXP v0SEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP chunkSizeSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type chunkSize(chunkSizeSEXP);
    Rcpp::traits::input_parameter< const int >::type verbose(verboseSEXP);
    __result = Rcpp::wrap(eigenPower_Rcpp_Parallel(A, v0, tol, maxit, chunkSize, verbose));
    return __result;
END_RCPP
}
// eigenPowerIt_Arma_Parallel
List eigenPowerIt_Arma_Parallel(const arma::mat& A, const arma::vec& v, unsigned int chunkSize);
RcppExport SEXP cpca_eigenPowerIt_Arma_Parallel(SEXP ASEXP, SEXP vSEXP, SEXP chunkSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type chunkSize(chunkSizeSEXP);
    __result = Rcpp::wrap(eigenPowerIt_Arma_Parallel(A, v, chunkSize));
    return __result;
END_RCPP
}
// eigenPower_Arma_Parallel
List eigenPower_Arma_Parallel(arma::mat& A, arma::vec& v0, const double tol, const int maxit, unsigned int chunkSize, const int verbose);
RcppExport SEXP cpca_eigenPower_Arma_Parallel(SEXP ASEXP, SEXP v0SEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP chunkSizeSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type chunkSize(chunkSizeSEXP);
    Rcpp::traits::input_parameter< const int >::type verbose(verboseSEXP);
    __result = Rcpp::wrap(eigenPower_Arma_Parallel(A, v0, tol, maxit, chunkSize, verbose));
    return __result;
END_RCPP
}
// numericNorm
double numericNorm(const NumericVector& x);
RcppExport SEXP cpca_numericNorm(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    __result = Rcpp::wrap(numericNorm(x));
    return __result;
END_RCPP
}
// numericProdMatVec
NumericVector numericProdMatVec(const NumericMatrix& mat, const NumericVector& vec);
RcppExport SEXP cpca_numericProdMatVec(SEXP matSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type vec(vecSEXP);
    __result = Rcpp::wrap(numericProdMatVec(mat, vec));
    return __result;
END_RCPP
}
// numericMultVec
NumericVector numericMultVec(const NumericVector& x, double a);
RcppExport SEXP cpca_numericMultVec(SEXP xSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    __result = Rcpp::wrap(numericMultVec(x, a));
    return __result;
END_RCPP
}
