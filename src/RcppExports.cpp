// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// eigenPower_Rcpp
List eigenPower_Rcpp(const NumericMatrix& A, const NumericVector& v0, double tol, int maxit, int mode, int verbose);
RcppExport SEXP _cpca_eigenPower_Rcpp(SEXP ASEXP, SEXP v0SEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP modeSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< int >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenPower_Rcpp(A, v0, tol, maxit, mode, verbose));
    return rcpp_result_gen;
END_RCPP
}
// eigenPower_RcppEigen
List eigenPower_RcppEigen(const Eigen::Map<Eigen::MatrixXd>& A, const Eigen::Map<Eigen::VectorXd>& v0, double tol, unsigned int maxit, unsigned int ncomp, bool symmetric, unsigned int verbose);
RcppExport SEXP _cpca_eigenPower_RcppEigen(SEXP ASEXP, SEXP v0SEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP ncompSEXP, SEXP symmetricSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ncomp(ncompSEXP);
    Rcpp::traits::input_parameter< bool >::type symmetric(symmetricSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenPower_RcppEigen(A, v0, tol, maxit, ncomp, symmetric, verbose));
    return rcpp_result_gen;
END_RCPP
}
// numericNorm
double numericNorm(const NumericVector& x);
RcppExport SEXP _cpca_numericNorm(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(numericNorm(x));
    return rcpp_result_gen;
END_RCPP
}
// numericProdMatVec
NumericVector numericProdMatVec(const NumericMatrix& mat, const NumericVector& vec);
RcppExport SEXP _cpca_numericProdMatVec(SEXP matSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(numericProdMatVec(mat, vec));
    return rcpp_result_gen;
END_RCPP
}
// numericMultVec
NumericVector numericMultVec(const NumericVector& x, double a);
RcppExport SEXP _cpca_numericMultVec(SEXP xSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(numericMultVec(x, a));
    return rcpp_result_gen;
END_RCPP
}
// eigen_RcppEigen
List eigen_RcppEigen(const Eigen::Map<Eigen::MatrixXd>& mat);
RcppExport SEXP _cpca_eigen_RcppEigen(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(eigen_RcppEigen(mat));
    return rcpp_result_gen;
END_RCPP
}
// eigenSelfAdjoint_RcppEigen
List eigenSelfAdjoint_RcppEigen(const Eigen::Map<Eigen::MatrixXd>& mat);
RcppExport SEXP _cpca_eigenSelfAdjoint_RcppEigen(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenSelfAdjoint_RcppEigen(mat));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cpca_eigenPower_Rcpp", (DL_FUNC) &_cpca_eigenPower_Rcpp, 6},
    {"_cpca_eigenPower_RcppEigen", (DL_FUNC) &_cpca_eigenPower_RcppEigen, 7},
    {"_cpca_numericNorm", (DL_FUNC) &_cpca_numericNorm, 1},
    {"_cpca_numericProdMatVec", (DL_FUNC) &_cpca_numericProdMatVec, 2},
    {"_cpca_numericMultVec", (DL_FUNC) &_cpca_numericMultVec, 2},
    {"_cpca_eigen_RcppEigen", (DL_FUNC) &_cpca_eigen_RcppEigen, 1},
    {"_cpca_eigenSelfAdjoint_RcppEigen", (DL_FUNC) &_cpca_eigenSelfAdjoint_RcppEigen, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_cpca(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
